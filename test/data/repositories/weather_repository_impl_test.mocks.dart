// Mocks generated by Mockito 5.4.5 from annotations
// in assessmentfounder/test/data/repositories/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:assessmentfounder/data/datasources/local/weather_local_data_source.dart'
    as _i6;
import 'package:assessmentfounder/data/datasources/remote/weather_remote_data_source.dart'
    as _i4;
import 'package:assessmentfounder/data/models/current_weather_model.dart'
    as _i2;
import 'package:assessmentfounder/data/models/forecast_model.dart' as _i3;
import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrentWeatherModel_0 extends _i1.SmartFake
    implements _i2.CurrentWeatherModel {
  _FakeCurrentWeatherModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastModel_1 extends _i1.SmartFake implements _i3.ForecastModel {
  _FakeForecastModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i4.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.CurrentWeatherModel> getCurrentWeatherByCity(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeatherByCity,
          [city],
        ),
        returnValue: _i5.Future<_i2.CurrentWeatherModel>.value(
            _FakeCurrentWeatherModel_0(
          this,
          Invocation.method(
            #getCurrentWeatherByCity,
            [city],
          ),
        )),
      ) as _i5.Future<_i2.CurrentWeatherModel>);

  @override
  _i5.Future<_i2.CurrentWeatherModel> getCurrentWeatherByCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeatherByCoordinates,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i5.Future<_i2.CurrentWeatherModel>.value(
            _FakeCurrentWeatherModel_0(
          this,
          Invocation.method(
            #getCurrentWeatherByCoordinates,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i5.Future<_i2.CurrentWeatherModel>);

  @override
  _i5.Future<_i3.ForecastModel> getForecastByCity(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByCity,
          [city],
        ),
        returnValue: _i5.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #getForecastByCity,
            [city],
          ),
        )),
      ) as _i5.Future<_i3.ForecastModel>);

  @override
  _i5.Future<_i3.ForecastModel> getForecastByCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByCoordinates,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i5.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #getForecastByCoordinates,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i5.Future<_i3.ForecastModel>);
}

/// A class which mocks [WeatherLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSource extends _i1.Mock
    implements _i6.WeatherLocalDataSource {
  MockWeatherLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.CurrentWeatherModel> getCachedCurrentWeather(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedCurrentWeather,
          [city],
        ),
        returnValue: _i5.Future<_i2.CurrentWeatherModel>.value(
            _FakeCurrentWeatherModel_0(
          this,
          Invocation.method(
            #getCachedCurrentWeather,
            [city],
          ),
        )),
      ) as _i5.Future<_i2.CurrentWeatherModel>);

  @override
  _i5.Future<_i3.ForecastModel> getCachedForecast(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedForecast,
          [city],
        ),
        returnValue: _i5.Future<_i3.ForecastModel>.value(_FakeForecastModel_1(
          this,
          Invocation.method(
            #getCachedForecast,
            [city],
          ),
        )),
      ) as _i5.Future<_i3.ForecastModel>);

  @override
  _i5.Future<void> cacheCurrentWeather(
    String? city,
    _i2.CurrentWeatherModel? weather,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrentWeather,
          [
            city,
            weather,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> cacheForecast(
    String? city,
    _i3.ForecastModel? forecast,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecast,
          [
            city,
            forecast,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getLastSearchedCities() => (super.noSuchMethod(
        Invocation.method(
          #getLastSearchedCities,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> addToSearchHistory(String? city) => (super.noSuchMethod(
        Invocation.method(
          #addToSearchHistory,
          [city],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearSearchHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearSearchHistory,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getFavoriteLocations() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteLocations,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> addToFavorites(String? city) => (super.noSuchMethod(
        Invocation.method(
          #addToFavorites,
          [city],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeFromFavorites(String? city) => (super.noSuchMethod(
        Invocation.method(
          #removeFromFavorites,
          [city],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isCacheValid(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isCacheValid,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i8.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<_i8.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i8.ConnectivityResult>);

  @override
  _i5.Future<_i8.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<_i8.ConnectivityResult>.value(
            _i8.ConnectivityResult.bluetooth),
      ) as _i5.Future<_i8.ConnectivityResult>);
}
